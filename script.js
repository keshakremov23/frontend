class MetroBot {
    constructor() {
        this.metroData = this.loadMetroData();
        this.allStations = this.getAllStationsList();
    }

    loadMetroData() {
        return {
            lines: {
                "–°–æ–∫–æ–ª—å–Ω–∏—á–µ—Å–∫–∞—è": {
                    color: "–∫—Ä–∞—Å–Ω–∞—è",
                    stations: ["–ë—É–ª—å–≤–∞—Ä –†–æ–∫–æ—Å—Å–æ–≤—Å–∫–æ–≥–æ", "–ß–µ—Ä–∫–∏–∑–æ–≤—Å–∫–∞—è", "–ü—Ä–µ–æ–±—Ä–∞–∂–µ–Ω—Å–∫–∞—è –ø–ª–æ—â–∞–¥—å", "–°–æ–∫–æ–ª—å–Ω–∏–∫–∏", 
                             "–ö—Ä–∞—Å–Ω–æ—Å–µ–ª—å—Å–∫–∞—è", "–ö–æ–º—Å–æ–º–æ–ª—å—Å–∫–∞—è", "–ö—Ä–∞—Å–Ω—ã–µ –í–æ—Ä–æ—Ç–∞", "–ß–∏—Å—Ç—ã–µ –ø—Ä—É–¥—ã", 
                             "–õ—É–±—è–Ω–∫–∞", "–û—Ö–æ—Ç–Ω—ã–π –†—è–¥", "–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –∏–º–µ–Ω–∏ –õ–µ–Ω–∏–Ω–∞", "–ö—Ä–æ–ø–æ—Ç–∫–∏–Ω—Å–∫–∞—è", 
                             "–ü–∞—Ä–∫ –∫—É–ª—å—Ç—É—Ä—ã", "–§—Ä—É–Ω–∑–µ–Ω—Å–∫–∞—è", "–°–ø–æ—Ä—Ç–∏–≤–Ω–∞—è", "–í–æ—Ä–æ–±—å—ë–≤—ã –≥–æ—Ä—ã", "–£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç", 
                             "–ü—Ä–æ—Å–ø–µ–∫—Ç –í–µ—Ä–Ω–∞–¥—Å–∫–æ–≥–æ", "–Æ–≥–æ-–ó–∞–ø–∞–¥–Ω–∞—è", "–¢—Ä–æ–ø–∞—Ä—ë–≤–æ", "–†—É–º—è–Ω—Ü–µ–≤–æ", "–°–∞–ª–∞—Ä—å–µ–≤–æ"]
                },
                "–ó–∞–º–æ—Å–∫–≤–æ—Ä–µ—Ü–∫–∞—è": {
                    color: "–∑–µ–ª–µ–Ω–∞—è", 
                    stations: ["–•–æ–≤—Ä–∏–Ω–æ", "–ë–µ–ª–æ–º–æ—Ä—Å–∫–∞—è", "–†–µ—á–Ω–æ–π –≤–æ–∫–∑–∞–ª", "–í–æ–¥–Ω—ã–π —Å—Ç–∞–¥–∏–æ–Ω", "–í–æ–π–∫–æ–≤—Å–∫–∞—è",
                             "–°–æ–∫–æ–ª", "–ê—ç—Ä–æ–ø–æ—Ä—Ç", "–î–∏–Ω–∞–º–æ", "–ë–µ–ª–æ—Ä—É—Å—Å–∫–∞—è", "–ú–∞—è–∫–æ–≤—Å–∫–∞—è", "–¢–≤–µ—Ä—Å–∫–∞—è",
                             "–¢–µ–∞—Ç—Ä–∞–ª—å–Ω–∞—è", "–ù–æ–≤–æ–∫—É–∑–Ω–µ—Ü–∫–∞—è", "–ü–∞–≤–µ–ª–µ—Ü–∫–∞—è", "–ê–≤—Ç–æ–∑–∞–≤–æ–¥—Å–∫–∞—è", "–¢–µ—Ö–Ω–æ–ø–∞—Ä–∫"]
                },
                "–ê—Ä–±–∞—Ç—Å–∫–æ-–ü–æ–∫—Ä–æ–≤—Å–∫–∞—è": {
                    color: "—Å–∏–Ω—è—è",
                    stations: ["–ü—è—Ç–Ω–∏—Ü–∫–æ–µ —à–æ—Å—Å–µ", "–ú–∏—Ç–∏–Ω–æ", "–í–æ–ª–æ–∫–æ–ª–∞–º—Å–∫–∞—è", "–ú—è–∫–∏–Ω–∏–Ω–æ", "–°—Ç—Ä–æ–≥–∏–Ω–æ",
                             "–ö—Ä—ã–ª–∞—Ç—Å–∫–æ–µ", "–ú–æ–ª–æ–¥—ë–∂–Ω–∞—è", "–ö—É–Ω—Ü–µ–≤—Å–∫–∞—è", "–°–ª–∞–≤—è–Ω—Å–∫–∏–π –±—É–ª—å–≤–∞—Ä", "–ü–∞—Ä–∫ –ü–æ–±–µ–¥—ã",
                             "–ö–∏–µ–≤—Å–∫–∞—è", "–°–º–æ–ª–µ–Ω—Å–∫–∞—è", "–ê—Ä–±–∞—Ç—Å–∫–∞—è", "–ü–ª–æ—â–∞–¥—å –†–µ–≤–æ–ª—é—Ü–∏–∏", "–ö—É—Ä—Å–∫–∞—è",
                             "–ë–∞—É–º–∞–Ω—Å–∫–∞—è", "–≠–ª–µ–∫—Ç—Ä–æ–∑–∞–≤–æ–¥—Å–∫–∞—è", "–°–µ–º—ë–Ω–æ–≤—Å–∫–∞—è", "–ü–∞—Ä—Ç–∏–∑–∞–Ω—Å–∫–∞—è", "–ò–∑–º–∞–π–ª–æ–≤—Å–∫–∞—è"]
                },
                "–ö–æ–ª—å—Ü–µ–≤–∞—è": {
                    color: "–∫–æ—Ä–∏—á–Ω–µ–≤–∞—è",
                    stations: ["–ü–∞—Ä–∫ –∫—É–ª—å—Ç—É—Ä—ã", "–û–∫—Ç—è–±—Ä—å—Å–∫–∞—è", "–î–æ–±—Ä—ã–Ω–∏–Ω—Å–∫–∞—è", "–ü–∞–≤–µ–ª–µ—Ü–∫–∞—è", "–¢–∞–≥–∞–Ω—Å–∫–∞—è",
                             "–ö—É—Ä—Å–∫–∞—è", "–ö–æ–º—Å–æ–º–æ–ª—å—Å–∫–∞—è", "–ü—Ä–æ—Å–ø–µ–∫—Ç –ú–∏—Ä–∞", "–ù–æ–≤–æ—Å–ª–æ–±–æ–¥—Å–∫–∞—è", "–ë–µ–ª–æ—Ä—É—Å—Å–∫–∞—è",
                             "–ö—Ä–∞—Å–Ω–æ–ø—Ä–µ—Å–Ω–µ–Ω—Å–∫–∞—è", "–ö–∏–µ–≤—Å–∫–∞—è"]
                }
            },
            transfers: {
                "–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –∏–º–µ–Ω–∏ –õ–µ–Ω–∏–Ω–∞": ["–°–æ–∫–æ–ª—å–Ω–∏—á–µ—Å–∫–∞—è", "–ê—Ä–±–∞—Ç—Å–∫–æ-–ü–æ–∫—Ä–æ–≤—Å–∫–∞—è", "–ö–æ–ª—å—Ü–µ–≤–∞—è"],
                "–ö–æ–º—Å–æ–º–æ–ª—å—Å–∫–∞—è": ["–°–æ–∫–æ–ª—å–Ω–∏—á–µ—Å–∫–∞—è", "–ö–æ–ª—å—Ü–µ–≤–∞—è"],
                "–ö–∏–µ–≤—Å–∫–∞—è": ["–ê—Ä–±–∞—Ç—Å–∫–æ-–ü–æ–∫—Ä–æ–≤—Å–∫–∞—è", "–ö–æ–ª—å—Ü–µ–≤–∞—è", "–§–∏–ª—ë–≤—Å–∫–∞—è"],
                "–ü–∞—Ä–∫ –∫—É–ª—å—Ç—É—Ä—ã": ["–°–æ–∫–æ–ª—å–Ω–∏—á–µ—Å–∫–∞—è", "–ö–æ–ª—å—Ü–µ–≤–∞—è"],
                "–¢–µ–∞—Ç—Ä–∞–ª—å–Ω–∞—è": ["–ó–∞–º–æ—Å–∫–≤–æ—Ä–µ—Ü–∫–∞—è", "–ê—Ä–±–∞—Ç—Å–∫–æ-–ü–æ–∫—Ä–æ–≤—Å–∫–∞—è"],
                "–ü–∞–≤–µ–ª–µ—Ü–∫–∞—è": ["–ó–∞–º–æ—Å–∫–≤–æ—Ä–µ—Ü–∫–∞—è", "–ö–æ–ª—å—Ü–µ–≤–∞—è"],
                "–ö—É—Ä—Å–∫–∞—è": ["–ê—Ä–±–∞—Ç—Å–∫–æ-–ü–æ–∫—Ä–æ–≤—Å–∫–∞—è", "–ö–æ–ª—å—Ü–µ–≤–∞—è"],
                "–ë–µ–ª–æ—Ä—É—Å—Å–∫–∞—è": ["–ó–∞–º–æ—Å–∫–≤–æ—Ä–µ—Ü–∫–∞—è", "–ö–æ–ª—å—Ü–µ–≤–∞—è"],
                "–ù–æ–≤–æ–∫—É–∑–Ω–µ—Ü–∫–∞—è": ["–ó–∞–º–æ—Å–∫–≤–æ—Ä–µ—Ü–∫–∞—è", "–ö–∞–ª–∏–Ω–∏–Ω—Å–∫–∞—è"]
            },
            prices: {
                "—Ä–∞–∑–æ–≤—ã–π –±–∏–ª–µ—Ç": 65,
                "–±–∏–ª–µ—Ç –Ω–∞ 2 –ø–æ–µ–∑–¥–∫–∏": 130, 
                "–±–∏–ª–µ—Ç –Ω–∞ 20 –ø–æ–µ–∑–¥–æ–∫": 800,
                "–±–∏–ª–µ—Ç –Ω–∞ 60 –ø–æ–µ–∑–¥–æ–∫": 1970,
                "–±–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π –Ω–∞ –º–µ—Å—è—Ü": 2900
            },
            schedule: {
                "–æ—Ç–∫—Ä—ã—Ç–∏–µ": "05:30",
                "–∑–∞–∫—Ä—ã—Ç–∏–µ": "01:00", 
                "–∏–Ω—Ç–µ—Ä–≤–∞–ª_—á–∞—Å—ã_–ø–∏–∫": "2-3 –º–∏–Ω—É—Ç—ã",
                "intervals_normal": "5-7 –º–∏–Ω—É—Ç"
            }
        };
    }

    getAllStationsList() {
        const stations = [];
        for (const lineName in this.metroData.lines) {
            stations.push(...this.metroData.lines[lineName].stations);
        }
        return [...new Set(stations)]; // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    }

    findStationInMetro(stationName) {
        stationName = stationName.toLowerCase();
        for (const lineName in this.metroData.lines) {
            const stations = this.metroData.lines[lineName].stations;
            for (const station of stations) {
                if (station.toLowerCase().includes(stationName)) {
                    return { station: station, line: lineName };
                }
            }
        }
        return null;
    }

    findRouteBetweenStations(startStationName, endStationName) {
        const startInfo = this.findStationInMetro(startStationName);
        const endInfo = this.findStationInMetro(endStationName);
        
        if (!startInfo) {
            return `‚ùå –°—Ç–∞–Ω—Ü–∏—è "${startStationName}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –º–µ—Ç—Ä–æ`;
        }
        if (!endInfo) {
            return `‚ùå –°—Ç–∞–Ω—Ü–∏—è "${endStationName}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –º–µ—Ç—Ä–æ`;
        }

        return this.calculateRoute(startInfo, endInfo);
    }

    calculateRoute(startInfo, endInfo) {
        const startStation = startInfo.station;
        const endStation = endInfo.station;
        const startLine = startInfo.line;
        const endLine = endInfo.line;

        // –ï—Å–ª–∏ —Å—Ç–∞–Ω—Ü–∏–∏ –Ω–∞ –æ–¥–Ω–æ–π –ª–∏–Ω–∏–∏
        if (startLine === endLine) {
            return this.getRouteOnSameLine(startStation, endStation, startLine);
        } else {
            return this.getRouteWithTransfer(startStation, endStation, startLine, endLine);
        }
    }

    getRouteOnSameLine(startStation, endStation, lineName) {
        const stations = this.metroData.lines[lineName].stations;
        const startIdx = stations.indexOf(startStation);
        const endIdx = stations.indexOf(endStation);
        
        if (startIdx === -1 || endIdx === -1) {
            return "‚ùå –û—à–∏–±–∫–∞: —Å—Ç–∞–Ω—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–∞ –ª–∏–Ω–∏–∏";
        }

        const stationCount = Math.abs(endIdx - startIdx);
        const travelTime = stationCount * 2;
        
        let routeStations, direction;
        if (startIdx < endIdx) {
            direction = "–≤ —Å—Ç–æ—Ä–æ–Ω—É –∫–æ–Ω–µ—á–Ω–æ–π —Å—Ç–∞–Ω—Ü–∏–∏";
            routeStations = stations.slice(startIdx, endIdx + 1);
        } else {
            direction = "–≤ –æ–±—Ä–∞—Ç–Ω–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏";
            routeStations = stations.slice(endIdx, startIdx + 1).reverse();
        }

        return `
üó∫Ô∏è *–ú–∞—Ä—à—Ä—É—Ç –æ—Ç ${startStation} –¥–æ ${endStation}:*

üìè *–õ–∏–Ω–∏—è:* ${lineName} (${this.metroData.lines[lineName].color})
üß≠ *–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:* ${direction}
‚è±Ô∏è *–í—Ä–µ–º—è –≤ –ø—É—Ç–∏:* ~${travelTime} –º–∏–Ω—É—Ç
üöá *–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞–Ω—Ü–∏–π:* ${stationCount}

*–ü—É—Ç—å:*
${routeStations.join(' ‚Üí ')}

üí° *–°–æ–≤–µ—Ç:* –í—ã—Ö–æ–¥–∏—Ç–µ –Ω–∞ —Å—Ç–∞–Ω—Ü–∏–∏ ${endStation}
`;
    }

    getRouteWithTransfer(startStation, endStation, startLine, endLine) {
        // –ù–∞—Ö–æ–¥–∏–º —Å—Ç–∞–Ω—Ü–∏–∏ –ø–µ—Ä–µ—Å–∞–¥–∫–∏ –º–µ–∂–¥—É –ª–∏–Ω–∏—è–º–∏
        const transferStations = this.findTransferStations(startLine, endLine);
        
        let transferInfo = "";
        if (transferStations.length > 0) {
            transferInfo = `\nüîÑ *–°—Ç–∞–Ω—Ü–∏–∏ –ø–µ—Ä–µ—Å–∞–¥–∫–∏:* ${transferStations.join(', ')}`;
        }

        // –û—Ü–µ–Ω–∏–≤–∞–µ–º –≤—Ä–µ–º—è –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞–Ω—Ü–∏–π
        const startLineStations = this.metroData.lines[startLine].stations.length;
        const endLineStations = this.metroData.lines[endLine].stations.length;
        const estimatedStations = Math.min(startLineStations, endLineStations) + 5;
        const estimatedTime = estimatedStations * 2 + 10; // +10 –º–∏–Ω—É—Ç –Ω–∞ –ø–µ—Ä–µ—Å–∞–¥–∫—É

        return `
üîÑ *–ú–∞—Ä—à—Ä—É—Ç —Å –ø–µ—Ä–µ—Å–∞–¥–∫–æ–π:*

üìç *–û—Ç:* ${startStation} (${startLine})
üìç *–î–æ:* ${endStation} (${endLine})
${transferInfo}

‚è±Ô∏è *–ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è:* ~${estimatedTime} –º–∏–Ω—É—Ç
üöá *–ü—Ä–∏–º–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞–Ω—Ü–∏–π:* ${estimatedStations}

*–ü—Ä–∏–º–µ—Ä–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç:*
1. –õ–∏–Ω–∏—è ${startLine} ‚Üí –õ–∏–Ω–∏—è ${endLine}
2. –ü–µ—Ä–µ—Å–∞–¥–∫–∞ –Ω–∞ —Å—Ç–∞–Ω—Ü–∏–∏ ${transferStations.length > 0 ? transferStations[0] : '—Å–æ–≥–ª–∞—Å–Ω–æ —Å—Ö–µ–º–µ –º–µ—Ç—Ä–æ'}

üí° *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:* –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–∞–≤–∏–≥–∞—Ü–∏—é –≤ –º–µ—Ç—Ä–æ –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞
`;
    }

    findTransferStations(line1, line2) {
        const transfers = [];
        for (const [station, lines] of Object.entries(this.metroData.transfers)) {
            if (lines.includes(line1) && lines.includes(line2)) {
                transfers.push(station);
            }
        }
        return transfers;
    }

    extractStationsFromText(text) {
        const foundStations = [];
        const words = text.toLowerCase().split(' ');
        
        for (const station of this.allStations) {
            const stationLower = station.toLowerCase();
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∏–ª–∏ —á–∞—Å—Ç–∏—á–Ω–æ–µ (–¥–ª—è —Å–æ–∫—Ä–∞—â–µ–Ω–Ω—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π)
            if (text.toLowerCase().includes(stationLower) || 
                words.some(word => stationLower.includes(word) && word.length > 3)) {
                foundStations.push(station);
            }
        }
        
        // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
        return [...new Set(foundStations)];
    }

    processQuestion(question) {
        question = question.toLowerCase().trim();
        
        // –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
        if (this.containsAny(question, ["–ø—Ä–∏–≤–µ—Ç", "–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π", "hello", "–Ω–∞—á–∞—Ç—å"])) {
            return "–ü—Ä–∏–≤–µ—Ç! –Ø –ú–µ—Ç—Ä–æ—à–∞, –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–º –º–µ—Ç—Ä–æ! üöá –Ø –º–æ–≥—É –ø–æ–º–æ—á—å —Å –º–∞—Ä—à—Ä—É—Ç–∞–º–∏ –º–µ–∂–¥—É –ª—é–±—ã–º–∏ —Å—Ç–∞–Ω—Ü–∏—è–º–∏, —Ü–µ–Ω–∞–º–∏ –Ω–∞ –ø—Ä–æ–µ–∑–¥ –∏ –¥—Ä—É–≥–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?";
        }
        
        // –¶–µ–Ω—ã
        if (this.containsAny(question, ["—Ü–µ–Ω–∞", "—Å—Ç–æ–∏–º–æ—Å—Ç—å", "–±–∏–ª–µ—Ç", "–ø—Ä–æ–µ–∑–¥", "—Å–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç"])) {
            return this.getPricesResponse();
        }
        
        // –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã
        else if (this.containsAny(question, ["–≤—Ä–µ–º—è", "—Ä–∞–±–æ—Ç–∞–µ—Ç", "–æ—Ç–∫—Ä—ã—Ç", "–∑–∞–∫—Ä—ã—Ç", "–≥—Ä–∞—Ñ–∏–∫", "—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"])) {
            return this.getScheduleResponse();
        }
        
        // –ú–∞—Ä—à—Ä—É—Ç—ã
        else if (this.containsAny(question, ["–∫–∞–∫ –¥–æ–µ—Ö–∞—Ç—å", "–º–∞—Ä—à—Ä—É—Ç", "–¥–æ–±—Ä–∞—Ç—å—Å—è", "–ø—Ä–æ–µ—Ö–∞—Ç—å", "–∫–∞–∫ –ø—Ä–æ–µ—Ö–∞—Ç—å"])) {
            return this.handleRouteQuestion(question);
        }
        
        // –°—Ç–∞–Ω—Ü–∏–∏
        else if (this.containsAny(question, ["—Å—Ç–∞–Ω—Ü–∏—è", "–≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è", "–∫–∞–∫–∞—è –ª–∏–Ω–∏—è", "–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç–∞–Ω—Ü–∏–∏"])) {
            return this.handleStationQuestion(question);
        }
        
        // –õ–∏–Ω–∏–∏
        else if (this.containsAny(question, ["–ª–∏–Ω–∏—è", "–≤–µ—Ç–∫–∞", "—Å–æ–∫–æ–ª—å–Ω–∏—á–µ—Å–∫–∞—è", "–∑–∞–º–æ—Å–∫–≤–æ—Ä–µ—Ü–∫–∞—è", "–∞—Ä–±–∞—Ç—Å–∫–æ", "–∫–æ–ª—å—Ü–µ–≤–∞—è"])) {
            return this.handleLineQuestion(question);
        }

        // –ü–æ–∏—Å–∫ —Å—Ç–∞–Ω—Ü–∏–∏
        else if (this.containsAny(question, ["–Ω–∞–π–¥–∏ —Å—Ç–∞–Ω—Ü–∏—é", "–µ—Å—Ç—å —Å—Ç–∞–Ω—Ü–∏—è", "–∏—â–∏ —Å—Ç–∞–Ω—Ü–∏—é"])) {
            return this.handleStationSearch(question);
        }
        
        // –ü–æ–º–æ—â—å
        else if (this.containsAny(question, ["–ø–æ–º–æ—â—å", "help", "—á—Ç–æ —Ç—ã —É–º–µ–µ—à—å"])) {
            return this.getHelp();
        }
        
        else {
            return this.getUnknownResponse();
        }
    }

    handleRouteQuestion(question) {
        const stations = this.extractStationsFromText(question);
        
        if (stations.length >= 2) {
            // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ –¥–≤–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Å—Ç–∞–Ω—Ü–∏–∏
            const startStation = stations[0];
            const endStation = stations[1];
            return this.findRouteBetweenStations(startStation, endStation);
        } else if (stations.length === 1) {
            return `üó∫Ô∏è –£–∫–∞–∑–∞–Ω–∞ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ —Å—Ç–∞–Ω—Ü–∏—è: "${stations[0]}". –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Å—Ç–∞–Ω—Ü–∏—é –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è. –ù–∞–ø—Ä–∏–º–µ—Ä: "–ö–∞–∫ –¥–æ–µ—Ö–∞—Ç—å –æ—Ç ${stations[0]} –¥–æ [—Å—Ç–∞–Ω—Ü–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è]?"`;
        } else {
            return `üó∫Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç–∞–Ω—Ü–∏–π –≤ –≤–∞—à–µ–º –≤–æ–ø—Ä–æ—Å–µ. 

*–ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤:*
‚Ä¢ "–ö–∞–∫ –¥–æ–µ—Ö–∞—Ç—å –æ—Ç –ö–∏–µ–≤—Å–∫–æ–π –¥–æ –ö–æ–º—Å–æ–º–æ–ª—å—Å–∫–æ–π?"
‚Ä¢ "–ú–∞—Ä—à—Ä—É—Ç –æ—Ç –ê—ç—Ä–æ–ø–æ—Ä—Ç–∞ –¥–æ –ü–∞—Ä–∫–∞ –∫—É–ª—å—Ç—É—Ä—ã"
‚Ä¢ "–ö–∞–∫ –ø—Ä–æ–µ—Ö–∞—Ç—å –æ—Ç –°–æ–∫–æ–ª—å–Ω–∏–∫–æ–≤ –¥–æ –í–î–ù–•?"

*–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–∞–Ω—Ü–∏–∏:* –í—Å–µ —Å—Ç–∞–Ω—Ü–∏–∏ –º–æ—Å–∫–æ–≤—Å–∫–æ–≥–æ –º–µ—Ç—Ä–æ`;
        }
    }

    handleStationSearch(question) {
        const searchTerm = question.replace(/–Ω–∞–π–¥–∏ —Å—Ç–∞–Ω—Ü–∏—é|–µ—Å—Ç—å —Å—Ç–∞–Ω—Ü–∏—è|–∏—â–∏ —Å—Ç–∞–Ω—Ü–∏—é/gi, '').trim();
        if (!searchTerm) {
            return "üîç –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞–Ω—Ü–∏–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞. –ù–∞–ø—Ä–∏–º–µ—Ä: '–ù–∞–π–¥–∏ —Å—Ç–∞–Ω—Ü–∏—é –ö–∏–µ–≤—Å–∫–∞—è'";
        }
        
        const found = this.findStationInMetro(searchTerm);
        if (found) {
            return this.getStationInfo(found.station, found.line);
        } else {
            const similar = this.allStations.filter(station => 
                station.toLowerCase().includes(searchTerm.toLowerCase())
            );
            
            if (similar.length > 0) {
                return `‚ùå –°—Ç–∞–Ω—Ü–∏—è "${searchTerm}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –∏–º–µ–ª–∏ –≤ –≤–∏–¥—É:\n${similar.map(s => `‚Ä¢ ${s}`).join('\n')}`;
            } else {
                return `‚ùå –°—Ç–∞–Ω—Ü–∏—è "${searchTerm}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–º –º–µ—Ç—Ä–æ.`;
            }
        }
    }

    containsAny(text, words) {
        return words.some(word => text.includes(word));
    }

    getPricesResponse() {
        const prices = this.metroData.prices;
        let response = "üí∞ *–°—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–µ–∑–¥–∞ –≤ –º–µ—Ç—Ä–æ:*\n\n";
        for (const [ticket, price] of Object.entries(prices)) {
            response += `‚Ä¢ ${ticket}: *${price} —Ä—É–±–ª–µ–π*\n`;
        }
        response += "\nüí° *–¢–∞–∫–∂–µ –¥–æ—Å—Ç—É–ø–Ω—ã –ª—å–≥–æ—Ç–Ω—ã–µ –±–∏–ª–µ—Ç—ã –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤, –ø–µ–Ω—Å–∏–æ–Ω–µ—Ä–æ–≤ –∏ –¥–µ—Ç–µ–π*";
        return response;
    }

    getScheduleResponse() {
        const schedule = this.metroData.schedule;
        return `
‚è∞ *–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –º–µ—Ç—Ä–æ:*

üü¢ *–û—Ç–∫—Ä—ã—Ç–∏–µ:* ${schedule.–æ—Ç–∫—Ä—ã—Ç–∏–µ}
üî¥ *–ó–∞–∫—Ä—ã—Ç–∏–µ:* ${schedule.–∑–∞–∫—Ä—ã—Ç–∏–µ}

üìä *–ò–Ω—Ç–µ—Ä–≤–∞–ª—ã –¥–≤–∏–∂–µ–Ω–∏—è:*
‚Ä¢ –í —á–∞—Å—ã –ø–∏–∫: ${schedule.–∏–Ω—Ç–µ—Ä–≤–∞–ª_—á–∞—Å—ã_–ø–∏–∫}
‚Ä¢ –í –æ–±—ã—á–Ω–æ–µ –≤—Ä–µ–º—è: ${schedule.intervals_normal}

üí° *–°–æ–≤–µ—Ç:* –°—Ç–∞—Ä–∞–π—Ç–µ—Å—å –∏–∑–±–µ–≥–∞—Ç—å –ø–æ–µ–∑–¥–æ–∫ –≤ —á–∞—Å—ã –ø–∏–∫ —Å 8:00-10:00 –∏ 17:00-19:00
`;
    }

    handleStationQuestion(question) {
        const stations = this.extractStationsFromText(question);
        if (stations.length > 0) {
            const stationInfo = this.findStationInMetro(stations[0]);
            if (stationInfo) {
                return this.getStationInfo(stationInfo.station, stationInfo.line);
            }
        }
        return "üöá –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞–Ω—Ü–∏–∏. –ù–∞–ø—Ä–∏–º–µ—Ä: '–°—Ç–∞–Ω—Ü–∏—è –ö–∏–µ–≤—Å–∫–∞—è' –∏–ª–∏ '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ö–æ–º—Å–æ–º–æ–ª—å—Å–∫–æ–π'";
    }

    handleLineQuestion(question) {
        if (question.includes("–∫—Ä–∞—Å–Ω") || question.includes("—Å–æ–∫–æ–ª—å–Ω–∏—á–µ—Å–∫")) {
            return this.getLineInfo("–°–æ–∫–æ–ª—å–Ω–∏—á–µ—Å–∫–∞—è");
        } else if (question.includes("–∑–µ–ª–µ–Ω") || question.includes("–∑–∞–º–æ—Å–∫–≤–æ—Ä–µ—Ü–∫")) {
            return this.getLineInfo("–ó–∞–º–æ—Å–∫–≤–æ—Ä–µ—Ü–∫–∞—è");
        } else if (question.includes("—Å–∏–Ω") || question.includes("–∞—Ä–±–∞—Ç—Å–∫")) {
            return this.getLineInfo("–ê—Ä–±–∞—Ç—Å–∫–æ-–ü–æ–∫—Ä–æ–≤—Å–∫–∞—è");
        } else if (question.includes("–∫–æ–ª—å—Ü–µ–≤")) {
            return this.getLineInfo("–ö–æ–ª—å—Ü–µ–≤–∞—è");
        } else {
            return this.getAllLines();
        }
    }

    getStationInfo(station, lineName) {
        const lineData = this.metroData.lines[lineName];
        const stations = lineData.stations;
        const idx = stations.indexOf(station);
        
        const prevStation = idx > 0 ? stations[idx-1] : "–∫–æ–Ω–µ—á–Ω–∞—è";
        const nextStation = idx < stations.length-1 ? stations[idx+1] : "–∫–æ–Ω–µ—á–Ω–∞—è";
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Å–∞–¥–∫–∏
        const transfers = this.metroData.transfers[station] || [];
        const transferInfo = transfers.length > 0 ? 
            `\nüîÑ *–ü–µ—Ä–µ—Å–∞–¥–∫–∏ –Ω–∞:* ${transfers.join(', ')}` : 
            "\nüîÑ *–ü–µ—Ä–µ—Å–∞–¥–∫–∏:* –Ω–µ—Ç";

        return `
üöá *–°—Ç–∞–Ω—Ü–∏—è ${station}*

üìè *–õ–∏–Ω–∏—è:* ${lineName} (${lineData.color})
üìç *–ü–æ–ª–æ–∂–µ–Ω–∏–µ:* ${idx+1}-—è –∏–∑ ${stations.length} —Å—Ç–∞–Ω—Ü–∏–π
‚¨ÖÔ∏è *–ü—Ä–µ–¥—ã–¥—É—â–∞—è:* ${prevStation}
‚û°Ô∏è *–°–ª–µ–¥—É—é—â–∞—è:* ${nextStation}
‚è∞ *–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:* 05:30 - 01:00
${transferInfo}
`;
    }

    getLineInfo(lineName) {
        const lineData = this.metroData.lines[lineName];
        const stations = lineData.stations;
        
        let response = `üìè *–õ–∏–Ω–∏—è ${lineName}* (${lineData.color}) - *${stations.length} —Å—Ç–∞–Ω—Ü–∏–π*\n\n`;
        response += `*–°—Ç–∞–Ω—Ü–∏–∏:*\n${stations.map((s, i) => `${i+1}. ${s}`).join('\n')}`;
        
        return response;
    }

    getAllLines() {
        let response = "üöá *–õ–∏–Ω–∏–∏ –º–µ—Ç—Ä–æ:*\n\n";
        for (const [lineName, lineData] of Object.entries(this.metroData.lines)) {
            response += `‚Ä¢ *${lineName}* (${lineData.color}) - ${lineData.stations.length} —Å—Ç–∞–Ω—Ü–∏–π\n`;
        }
        response += "\nüí° –°–ø—Ä–æ—Å–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ –ª—é–±–æ–π –ª–∏–Ω–∏–∏!";
        return response;
    }

    getHelp() {
        return `
üöá *–Ø –º–æ–≥—É –ø–æ–º–æ—á—å —Å:*

üó∫Ô∏è *–ú–∞—Ä—à—Ä—É—Ç–∞–º–∏ –º–µ–∂–¥—É –ª—é–±—ã–º–∏ —Å—Ç–∞–Ω—Ü–∏—è–º–∏* - "–∫–∞–∫ –¥–æ–µ—Ö–∞—Ç—å –æ—Ç –ê –¥–æ –ë?"
üí∞ *–°—Ç–æ–∏–º–æ—Å—Ç—å—é –ø—Ä–æ–µ–∑–¥–∞* - "—Å–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç –±–∏–ª–µ—Ç?"
‚è∞ *–í—Ä–µ–º–µ–Ω–µ–º —Ä–∞–±–æ—Ç—ã* - "–∫–æ–≥–¥–∞ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è –º–µ—Ç—Ä–æ?"
üöá *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å—Ç–∞–Ω—Ü–∏—è—Ö* - "—Å—Ç–∞–Ω—Ü–∏—è –ö–∏–µ–≤—Å–∫–∞—è"
üìè *–õ–∏–Ω–∏—è–º–∏ –º–µ—Ç—Ä–æ* - "–∫—Ä–∞—Å–Ω–∞—è –ª–∏–Ω–∏—è"
üîç *–ü–æ–∏—Å–∫–æ–º —Å—Ç–∞–Ω—Ü–∏–π* - "–Ω–∞–π–¥–∏ —Å—Ç–∞–Ω—Ü–∏—é –ê—ç—Ä–æ–ø–æ—Ä—Ç"

*–ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤:*
‚Ä¢ –ö–∞–∫ –¥–æ–µ—Ö–∞—Ç—å –æ—Ç –ê—ç—Ä–æ–ø–æ—Ä—Ç–∞ –¥–æ –ü–∞—Ä–∫–∞ –∫—É–ª—å—Ç—É—Ä—ã?
‚Ä¢ –ú–∞—Ä—à—Ä—É—Ç –æ—Ç –°–æ–∫–æ–ª—å–Ω–∏–∫–æ–≤ –¥–æ –ö–æ–º—Å–æ–º–æ–ª—å—Å–∫–æ–π
‚Ä¢ –°–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç –ø—Ä–æ–µ–∑–¥?
‚Ä¢ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –º–µ—Ç—Ä–æ
‚Ä¢ –°—Ç–∞–Ω—Ü–∏—è –ö–∏–µ–≤—Å–∫–∞—è
‚Ä¢ –ö–∞–∫–∏–µ –µ—Å—Ç—å –ª–∏–Ω–∏–∏ –º–µ—Ç—Ä–æ?
‚Ä¢ –ù–∞–π–¥–∏ —Å—Ç–∞–Ω—Ü–∏—é –í–î–ù–•
`;
    }

    getUnknownResponse() {
        const responses = [
            "ü§î –ù–µ —Å–æ–≤—Å–µ–º –ø–æ–Ω—è–ª –≤–∞—à –≤–æ–ø—Ä–æ—Å. –°–ø—Ä–æ—Å–∏—Ç–µ –æ –º–∞—Ä—à—Ä—É—Ç–∞—Ö, —Ü–µ–Ω–∞—Ö –∏–ª–∏ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã –º–µ—Ç—Ä–æ!",
            "üöá –Ø —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Å—å –Ω–∞ –º–µ—Ç—Ä–æ. –ú–æ–∂–µ—Ç–µ —Å–ø—Ä–æ—Å–∏—Ç—å –æ –ø—Ä–æ–µ–∑–¥–µ, –º–∞—Ä—à—Ä—É—Ç–∞—Ö –º–µ–∂–¥—É —Å—Ç–∞–Ω—Ü–∏—è–º–∏ –∏–ª–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏?",
            "üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–ø—Ä–æ—Å–∏—Ç—å –∏–Ω–∞—á–µ. –ù–∞–ø—Ä–∏–º–µ—Ä: '–ö–∞–∫ –¥–æ–µ—Ö–∞—Ç—å –æ—Ç –ê –¥–æ –ë?' –∏–ª–∏ '–°–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç –±–∏–ª–µ—Ç?'",
            "üìù –ù–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª –≤–æ–ø—Ä–æ—Å. –Ø –º–æ–≥—É –ø–æ–º–æ—á—å —Å –º–∞—Ä—à—Ä—É—Ç–∞–º–∏ –º–µ–∂–¥—É –ª—é–±—ã–º–∏ —Å—Ç–∞–Ω—Ü–∏—è–º–∏, —Ü–µ–Ω–∞–º–∏ –∏ –≤—Ä–µ–º–µ–Ω–µ–º —Ä–∞–±–æ—Ç—ã –º–µ—Ç—Ä–æ."
        ];
        return responses[Math.floor(Math.random() * responses.length)];
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
const bot = new MetroBot();

// –≠–ª–µ–º–µ–Ω—Ç—ã DOM
const chat = document.getElementById('chat');
const messageInput = document.getElementById('message-input');
const sendBtn = document.getElementById('send-btn');
const quickButtons = document.querySelectorAll('.quick-btn');

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —á–∞—Ç–æ–º
function addMessage(text, isUser = false) {
    const messageDiv = document.createElement('div');
    messageDiv.className = `message ${isUser ? 'user-message' : 'bot-message'}`;
    
    const messageContent = document.createElement('div');
    messageContent.className = 'message-content';
    
    const avatar = document.createElement('img');
    avatar.className = 'avatar';
    avatar.src = isUser ? 'user-avatar.png' : 'logo-metrhosha.png';
    avatar.alt = isUser ? '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å' : '–ú–µ—Ç—Ä–æ—à–∞';
    
    const bubble = document.createElement('div');
    bubble.className = 'message-bubble';
    
    const textDiv = document.createElement('div');
    textDiv.className = 'message-text';
    textDiv.innerHTML = formatMessage(text);
    
    bubble.appendChild(textDiv);
    
    if (isUser) {
        messageContent.appendChild(bubble);
        messageContent.appendChild(avatar);
    } else {
        messageContent.appendChild(avatar);
        messageContent.appendChild(bubble);
    }
    
    messageDiv.appendChild(messageContent);
    chat.appendChild(messageDiv);
    scrollToBottom();
}

function formatMessage(text) {
    // –ü—Ä–æ—Å—Ç–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
    return text.replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
               .replace(/\n/g, '<br>');
}

function showTypingIndicator() {
    const typingDiv = document.createElement('div');
    typingDiv.className = 'message bot-message';
    typingDiv.id = 'typing-indicator';
    
    const messageContent = document.createElement('div');
    messageContent.className = 'message-content';
    
    const avatar = document.createElement('img');
    avatar.className = 'avatar';
    avatar.src = 'logo-metrhosha.png';
    avatar.alt = '–ú–µ—Ç—Ä–æ—à–∞';
    
    const bubble = document.createElement('div');
    bubble.className = 'typing-indicator';
    
    for (let i = 0; i < 3; i++) {
        const dot = document.createElement('div');
        dot.className = 'typing-dot';
        bubble.appendChild(dot);
    }
    
    messageContent.appendChild(avatar);
    messageContent.appendChild(bubble);
    typingDiv.appendChild(messageContent);
    chat.appendChild(typingDiv);
    scrollToBottom();
}

function hideTypingIndicator() {
    const typingIndicator = document.getElementById('typing-indicator');
    if (typingIndicator) {
        typingIndicator.remove();
    }
}

function scrollToBottom() {
    chat.scrollTop = chat.scrollHeight;
}

function sendMessage() {
    const text = messageInput.value.trim();
    if (!text) return;
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    addMessage(text, true);
    messageInput.value = '';
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–∞–±–æ—Ä–∞
    showTypingIndicator();
    
    // –ò–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –æ—Ç–≤–µ—Ç–∞
    setTimeout(() => {
        hideTypingIndicator();
        const response = bot.processQuestion(text);
        addMessage(response, false);
    }, 1000 + Math.random() * 1000);
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
sendBtn.addEventListener('click', sendMessage);

messageInput.addEventListener('keypress', (e) => {
    if (e.key === 'Enter') {
        sendMessage();
    }
});

// –ë—ã—Å—Ç—Ä—ã–µ –∫–Ω–æ–ø–∫–∏
quickButtons.forEach(button => {
    button.addEventListener('click', () => {
        const question = button.getAttribute('data-question');
        messageInput.value = question;
        sendMessage();
    });
});

// –§–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
messageInput.focus();

// –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É –ø—Ä–∏ —Ñ–æ–∫—É—Å–µ
messageInput.addEventListener('focus', () => {
    messageInput.placeholder = "–ù–∞–ø—Ä–∏–º–µ—Ä: –∫–∞–∫ –¥–æ–µ—Ö–∞—Ç—å –æ—Ç –ê—ç—Ä–æ–ø–æ—Ä—Ç–∞ –¥–æ –ü–∞—Ä–∫–∞ –∫—É–ª—å—Ç—É—Ä—ã...";
});

messageInput.addEventListener('blur', () => {
    messageInput.placeholder = "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å...";
});